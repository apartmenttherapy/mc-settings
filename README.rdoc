= Application Settings Manager

This gem provides an easy and capistrano-friendly way to manage application configuration across 
multiple environments, such as development, QA, staging, production, etc.

Applications typically rely on configuration settings, such as host names, URLs, usernames and many
more. Some change between environemnts, some do not.  This gem makes managing this hierarchy of
settings values easy and provides convenient and compact syntax to access the settings.

Configuration is stored in YAML files, in the following format, with it's top level structure being a hash with keys being the names of individual settings. For example, one file could be:

 tax:
   default: 0.0
   california: 7.5
 states:
   default: 
     - 'CA'
     - 'WA'
     - 'NY'
   ship_to:
     - 'CA'
     - 'NY'
 math_pi: 3.14159526

etc.

== Usage 

Once settings are initialized (see below), they can be used in code in the following way:

* Setting.key_name is optimized to return default value if available.
* Setting.key_name(:sub_key_name) returns value from the 2nd level hash if available.
* Setting[:key_name] & Setting['key_name'] return entire 2nd-level hash without any regard for whether default value exists.

For example, given the above YAML file:

  Setting.tax => 0.0
  Setting.tax(:california) => 7.5
  Setting[:tax] => { 'default' => 0.0, 'california' => 7.5 } 
  Setting.states => [ 'CA', 'WA', 'NY' ]
  Setting.states['ship_to'] => [ 'CA', 'NY' ]

The following usage is supported for backwards compatibility, but is deprecated and should
not be used for new projects:

  Setting.available_settings['key_name']
  Setting.available_settings['key_name']['sub_key_name']

== Settings Loading

This gem should be initialized in your environment.rb (if using Rails), or in any other
application initialization block.

Consider an example:

  Setting.load(:path  => "#{Rails.root}/config/settings",
               :files => ["default.yml", "environments/#{Rails.env}.yml"],
               :local => true)

This parameter hash configures which YML files to load, and in what order, and from where.

* :path specifies the "root" folder where settings files will be loaded from
* :files is an array that lists file names relative to the :path. In the example above, settings folder contains subfolder "environments" where Rails-specific environment files are located (such as "development.yml", "staging.yml", "production.yml", etc)
* :local can be optionally specified as a true value, and if specified Setting gem will load all *.yml files that live under the :path/local folder. 

Below is an example of the loading order based on the above example, "development" Rails environment, and a "local" folder with 3 additional YML files:

  config/settings/default.yml
  config/settings/environments/development.yml
  config/settings/local/authorize-net.yml
  config/settings/local/paypal.yml
  config/settings/local/other.yml

Each YML file defines a ruby Hash.  During file loading, the hashes are merged, that is keys loaded in early files may be overwritten by keys in other files. This is deliberate and by design: this allows you to create tiny override files for each environment, or even each machine you want to deploy to. 

Note that as of 0.1.1, the keys can be overridden recursively. To understand this, please review the following simple example:

default.yml:

  tax: 
    california: 
      sales: 
        7.5
      property: 
        1.03

  Setting.tax(:california) => { :sales => 7.5, :property => 1.03 }

tax-override.yml:

  tax: 
    california: 
      property: 
        12.4
 
  Setting.tax(:california) => { :sales => 7.5, :property => 12.4 }





== Copyright

Copyright 2010 (c) ModCloth Inc.

Authors: 2010 Edwin Cruz & Konstantin Gredeskoul

See LICENSE.txt for further details.

